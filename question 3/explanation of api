The code defines a Flask utility with  APIs:

/api: This API returns the info of an worker by way of their ENO. The ENO parameter is surpassed inside the request URL as a query parameter.
/api/employeesByDname: This API returns a list of personnel in a selected branch. The DNAME parameter is surpassed in the request URL as a query parameter.
The primary API is described via the following code:

@app.Path('/api', strategies=['GET'])
Def get_employee_by_ENO():
    attempt:
        ENO = int(request.Args.Get('ENO'))
        if not ENO:
            boost ValueError('ENO parameter is needed')

        employee = subsequent((emp for emp in employees if emp["ENO"] == ENO), None)
        if now not employee:
            improve ValueError(f'worker with ENO ENO now not determined')

        go back jsonify(worker)
    except Exception as e:
        go back jsonify(error=str(e)), four hundred
The @app.Course()decorator defines the URL route for the API. The methodsargument specifies that the API can only be accessed the use of the GETmethod.

The get_employee_by_ENO()feature is the handler for the API. The characteristic first attempts to get the ENO parameter from the request URL. If the parameter isn't present, the feature increases an ValueErrorexception.

Next, the function makes use of a forloop to iterate through the employeeslist. The employeeslist is a list of employee information. For every employee record, the characteristic checks if the ENO of the document fits the ENO parameter. If the ENO suits, the feature returns the worker document.

If the ENO parameter does no longer fit any of the employee statistics, the characteristic increases an ValueErrorexception.

The second API is defined by way of the subsequent code:

@app.Route('/api/employeesByDname', techniques=['GET'])
Def get_employees_by_DNAME():
    try:
        DNAME = request.Args.Get('DNAME')
        if not DNAME:
            increase ValueError('DNAME parameter is needed')

        filtered_employees = [emp for emp in personnel if departments.Get(emp["DNO"]) == DNAME]
        if no longer filtered_employees:
            boost ValueError(f'No personnel discovered in branch with DNAME DNAME')

        return jsonify(filtered_employees)
    besides Exception as e:
        go back jsonify(mistakes=str(e)), four hundred
The @app.Path()decorator defines the URL route for the API. The methodsargument specifies that the API can only be accessed using the GETmethod.

The get_employees_by_DNAME()characteristic is the handler for the API. The feature first attempts to get the DNAME parameter from the request URL. If the parameter isn't present, the characteristic raises an ValueErrorexception.

Next, the feature uses a forloop to iterate through the employeeslist. The employeeslist is a list of employee records. For each employee document, the function assessments if the department call of the file matches the DNAME parameter. If the branch names match, the function provides the employee document to a listing of filtered personnel.

If the DNAME parameter does not match any of the branch names of the employee statistics, the feature returns an empty listing.

Ultimately, the characteristic returns the list of filtered personnel as JSON.
